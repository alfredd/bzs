#!/usr/bin/env bash

function update_repo_on_all_nodes() {
  START=0
  END=$1
  for ((c = $START; c < $END; c++)); do
    ./db.sh "$c" uprepo
  done
}

function clear_db_and_working_directories() {
  START=0
  END=$1
  for ((c = $START; c < $END; c++)); do
    ./db.sh "$c" bftclear
    ./db.sh "$c" clean
  done
}

function build_code() {
  START=0
  END=$1
  for ((c = $START; c < $END; c++)); do
    ./db.sh "$c" build
  done
}

function stop_all_clusters() {
  START=0
  END=$1
  for ((c = $START; c < $END; c++)); do
    ./db.sh "$c" stop
  done
}

function start_all_clusters() {
  START=1
  END=$1
  ./db.sh "0" starty
  for ((c = $START; c < $END; c++)); do
    ./db.sh "$c" start
  done
}

function get_logs_from_all_clusters() {
  START=0
  END=$1
  for ((c = $START; c < $END; c++)); do
    ./db.sh "$c" logall
  done
}

function copy_data_to_all_nodes() {
  START=0
  END=$1
  for ((c = $START; c < $END; c++)); do
    ./db.sh "$c" copydb
  done
}

function create_nkey_data() {
  keysize=$1
  START=1
  END=$keysize
  rm "data.txt"
  for ((c = $START; c <= $END; c++)); do
    echo $c >>"data.txt"
  done
}

cluster_count=$1
key_count=$2

#echo "Running benchmark for 76 Transactions per batch. R:W ratio of 5:1"
#stop_all_clusters $cluster_count
#sleep 3

if [[ "$3" == "build" ]]; then
  echo "Rebuildng code on all clusters"
  update_repo_on_all_nodes $cluster_count
  build_code $cluster_count
  sleep 45
fi
sleep 1

echo "creating $key_count keys"
#create_nkey_data "$key_count"
#copy_data_to_all_nodes "$cluster_count"


S=2
E=$cluster_count
for ((c = $S; c <= $E; )); do
  echo "Testing for $c clusters"
  echo "Clearing old db and BFT-SMaRt state."
  clear_db_and_working_directories $c 

  sleep 3
  file="$c"clusters 
  config_file="test_configurations_and_data/config.properties.$file"
  echo "Running benchmark for config file: $config_file"
  cp "$config_file" ./config.properties
  cat config.properties
  copy_data_to_all_nodes "$c"
  sleep 3

  echo "Starting all clusters for benchmark run."
  start_all_clusters $c

  echo "Waiting for benchmark run to complete"
  found=1
  try_again=0
  while [[ $found -eq 1 ]]; do
    sleep 60
    echo "retrieving log file"
    scp cc@129.114.109.154:~/bzs/java/bzstore/scripts/db.log ./db.log 

    grep "END OF BENCHMARK RUN" db.log 
    if [[ "$?" == "0" ]]; then
      echo "Benchmark completed"
      found=0
      continue
    fi

    grep "DEADLINE_EXCEEDED" db.log
    if [[ "$?" == "0" ]]; then
      echo "Benchmark failed with exception 'DEADLINE_EXCEEDED'"
      found=0
      continue 
    fi 

  done
  c=$((c + 1))

  get_logs_from_all_clusters $cluster_count
  mkdir results/$file  
  mv logs/* results/$file/ 
  tar -zcf results/$file.tar.gz results/$file/

  echo "Stopping all clusters"
  stop_all_clusters $cluster_count
  sleep 5 

done

#clear_db_and_working_directories $cluster_count
#start_all_clusters $cluster_count

#get_logs_from_all_clusters $cluster_count
#stop_all_clusters $cluster_count



