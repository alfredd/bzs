syntax = "proto3";

package protocol;

option java_package = "edu.ucsc.edgelab.db.bzs";

service BZStore {
    rpc Commit (Transaction) returns (TransactionResponse);
    rpc ROCommit (ROTransaction) returns (ROTransactionResponse);
    rpc ReadOperation (Read) returns (ReadResponse);
}

service Cluster {
    rpc CommitPrepare (Transaction) returns (TransactionResponse);
    rpc Commit (Transaction) returns (TransactionResponse);
    rpc ReadOperation (Read) returns (ReadResponse);
    rpc Abort (Transaction) returns (TransactionResponse);

    rpc PrepareAll (TransactionBatch) returns (TransactionBatchResponse);
    rpc CommitAll (TransactionBatch) returns (TransactionBatchResponse);
    rpc AbortAll (TransactionBatch) returns (TransactionBatchResponse);
}

service DTxnProcessor {
    rpc PrepareAll (TransactionBatch) returns (TransactionBatchResponse);
    rpc CommitAll (TransactionBatch) returns (TransactionBatchResponse);
    rpc AbortAll (TransactionBatch) returns (TransactionBatchResponse);
}

service Replica {
    rpc Forward (Transaction) returns (TransactionResponse);
    rpc ForwardROT (ROTransaction) returns (ROTransactionResponse);
}

service PKIService {
    rpc GetPublicKey (KeyType) returns (Key); // Possible interface to retrieve digital signatures from nodes.
    rpc GetPrivateKey (KeyType) returns (Key); // Possible interface to retrieve digital signatures from nodes
}

message KeyType {
    string algorithm = 1;
}

message Key {
    string key = 1;
    string type = 2;
}

message TransactionBatch {
    string ID = 1;
    Operation operation = 2;
    repeated Transaction transactions = 3;
    repeated ClusterPC remotePrepareTxn = 4;
    repeated ClusterPC remoteCommitTxn = 5;
    repeated ROTransaction rotransaction = 6;
    SmrLogEntry smrLogEntry = 7;
    map<int32, int32> depVector = 8;
}

message ClusterPC {
    Operation operation = 1;
    repeated Transaction transactions = 2;
    string ID = 3;
}

message ClusterPCResponse {
    OperationStatus status = 3;
    repeated TransactionResponse responses = 1;
    string ID = 2;
}

message TransactionBatchResponse {
    string ID = 1;
    Operation operation = 2;
    repeated TransactionResponse responses = 3;
    repeated ClusterPCResponse remotePrepareTxnResponse = 4;
    repeated ClusterPCResponse remoteCommitTxnResponse = 5;
    repeated ROTransactionResponse readresponses = 6;
    SmrLogEntry smrLogEntry = 7;
    map<int32, int32> depVector = 8;
}

message BFTCommit {
    repeated TransactionResponse transactions = 1;
    int32 ID = 2;
}
message BFTCommitResponse {
    repeated TransactionResponse responses = 1;
    int32 ID = 2;
}

enum TransactionStatus {
    COMMITTED = 0;
    ABORTED = 1;
    PREPARED = 2;
    TIMEOUT = 3;
    FAILURE = 4;
}

enum OperationStatus {
    FAILED = 0; // To be removed. Kept for backward compatibility (for now). Use "ABORTED" instead.
    SUCCESS = 1;
    INVALID = 2;
    COMMIT_SUCCESS = 3;
    ABORT = 4;
    PREPARE_SUCCESS = 5;
    PARTIAL_SUCCESS = 6;
}

enum Operation {
    BFT_PREPARE = 0;
    BFT_COMMIT = 1;
    BFT_ABORT = 2;
    BFT_SMR_PREPARE = 3;
    BFT_SMR_COMMIT = 4;
    DRWT_PREPARE = 5;
    DRWT_COMMIT = 6;
    DRWT_ABORT = 7;
}

message Write {
    string key = 1;
    string value = 2;
    int32 clusterID = 3;
    int32 replicaID = 4;
}

message WriteResponse {
    //    string key = 1;
    //    string value = 2;
    Write writeOperation = 1;
    int64 version = 2;
    string responseDigest = 3;
    OperationStatus status = 4;
    //    int32 clusterID = 6;
    //    int32 replicaID = 7;
}

message Read {
    string key = 1;
    int32 clusterID = 2;
    int32 replicaID = 3;
}

message ReadResponse {
    //    string key = 1;
    Read readOperation = 1;
    string value = 2;
    int64 version = 3;
    string responseDigest = 4;
    OperationStatus status = 5;
    //    int32 clusterID = 6;
    //    int32 replicaID = 7;
}

message ReadHistory {
    Read readOperation = 1;
    string value = 2;
    int64 version = 3;
    string responseDigest = 4;
    //    string key = 1;
    //    int32 clusterID = 5;
//    int32 replicaID = 6;
}

message ROTransaction {
    repeated Read readOperations = 1;
}

message ROTransactionResponse {
    TransactionStatus status = 1;
    repeated ReadResponse readResponses = 2;
}

message Transaction {
    repeated ReadHistory readHistory = 1;
    repeated Write writeOperations = 2;
    string transactionID = 3;
    int32 epochNumber = 4;
    //    VectorClock clock = 5;
}

message TransactionResponse {
    TransactionStatus status = 1;
    repeated WriteResponse writeResponses = 2;
    string transactionID = 3;
    int32 epochNumber = 4;
    map<int32, int32> depVector = 5;
}

message DBData {
    string value = 1;
    int64 version = 2;
}

message MerkleTree {
    bytes root = 1;
    repeated bytes nodes = 2;
}

message VectorClock {
    repeated Timestamp timestamps = 1;
}

message Timestamp {
    int32 clusterID = 1;
    int32 epochNumber = 2;
}

message DVec {
    map<int32, int32> depVector = 1;
}

message SmrLogEntry {
    int32 epochNumber = 1;
    repeated Transaction lRWTxns = 2;
    repeated TwoPCDRWTxn remotePreparedDRWTs =3;
    repeated TwoPCDRWTxn remoteCommittedDRWTs =4;
    repeated Transaction preparedDRWTxns = 5;
    repeated Transaction committedDRWTxns = 6;
    map<int32, int32> depVector = 7;
    int32 lce = 8;
}

message TwoPCDRWTxn {
    repeated Transaction transactions = 2;
    string ID = 3;
}